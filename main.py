import datetime
import asyncio
import time
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
import re
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from geopy.geocoders import Nominatim
import json
import requests
from validate_email import validate_email


geolocator = Nominatim(user_agent="tg_bot")

tconv = lambda x: time.strftime("%H:%M:%S %d.%m.%Y", time.localtime(x))
globalVar = dict()

token = '1916725688:AAFK3mBOtt3UoEyeco65JPjo4Hpy6g0MTWs'

storage = MemoryStorage()
bot = Bot(token=token)
dp = Dispatcher(bot=bot, storage=storage)

url = 'https://api-prof.ru'

class State_list(StatesGroup):
    waiting_login_email = State()
    waiting_login_password = State()
    waiting_appeal_text = State()
    waiting_appeal_photo = State()
    waiting_cold_water = State()
    waiting_hot_water = State()
    waiting_create_appeal = State()


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(logging_in, state=State_list.waiting_login_email)
    dp.register_message_handler(logging_in2, state=State_list.waiting_login_password)
    dp.register_message_handler(send_text, state=State_list.waiting_appeal_text)
    dp.register_message_handler(create_appeal, state=State_list.waiting_create_appeal)
    dp.register_message_handler(send_photo, state=State_list.waiting_appeal_photo)
    dp.register_message_handler(cold_water_update, state=State_list.waiting_cold_water)
    dp.register_message_handler(hot_water_update, state=State_list.waiting_hot_water)


def menu():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    log_in = InlineKeyboardButton("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É üîê", callback_data="log_in")
    registration = InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üìù", callback_data="registration")
    markup.add(log_in, registration)
    return markup


def menu_authorized():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    appeals = InlineKeyboardButton("–ñ–∞–ª–æ–±—ã ‚òπ", callback_data="appeals")
    meter = InlineKeyboardButton("–°—á—ë—Ç—á–∏–∫–∏ üë®‚Äçüîß", callback_data="meter")
    statements = InlineKeyboardButton("–°–ø—Ä–∞–≤–∫–∏ üìÑ", callback_data="statements")
    exit = InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ üö™", callback_data="exit")
    markup.add(appeals, meter, statements, exit)
    return markup

def exit_confirm():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    exit_confirmed = InlineKeyboardButton("–î–∞", callback_data="exit_confirmed")
    back_to_menu_authorized = InlineKeyboardButton('–ù–µ—Ç', callback_data='back_to_menu_authorized')
    markup.add(exit_confirmed, back_to_menu_authorized)
    return markup

def menu_appeals():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    create__appeal = InlineKeyboardButton("–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è üò£", callback_data="create__appeal")
    my__appeals = InlineKeyboardButton("–ú–æ–∏ –∂–∞–ª–æ–±—ã üì¨", callback_data="my__appeals")
    back_to_menu_authorized = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_authorized')
    markup.add(create__appeal, my__appeals, back_to_menu_authorized)
    return markup

def menu_statements():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    create__statement = InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É üì®", callback_data="create__statement__question")
    my__statements = InlineKeyboardButton("–ú–æ–∏ —Å–ø—Ä–∞–≤–∫–∏ üì¨", callback_data="my__statements")
    back_to_menu_authorized = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_authorized')
    markup.add(create__statement, my__statements, back_to_menu_authorized)
    return markup

def menu_meter():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    update_meter = InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è üîÑ", callback_data="update_meter")
    back_to_menu_authorized = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_authorized')
    markup.add(update_meter, back_to_menu_authorized)
    return markup


def send_meter():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    send_meter = InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="send_meter")
    back_to_menu_choose_meter = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_choose_meter')
    markup.add(send_meter, back_to_menu_choose_meter)
    return markup


def choose_appeal(last, first):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    if first:
        choose_appeal_back = InlineKeyboardButton("üö´", callback_data='None')
    else:
        choose_appeal_back = InlineKeyboardButton("<--", callback_data='choose_appeal_back')
    if last:
        choose_appeal_forward = InlineKeyboardButton("üö´", callback_data="None")
    else:
        choose_appeal_forward = InlineKeyboardButton("-->", callback_data="choose_appeal_forward")
    reload_my_appeal = InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data='reload_my_appeal')
    back_to_menu_appeal = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_appeals')
    markup.add(choose_appeal_back, choose_appeal_forward)
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    markup.add(reload_my_appeal, back_to_menu_appeal)
    return markup


def choose_statement(last, first):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    if first:
        choose_statement_back = InlineKeyboardButton("üö´", callback_data='None')
    else:
        choose_statement_back = InlineKeyboardButton("<--", callback_data='choose_statement_back')
    if last:
        choose_statement_forward = InlineKeyboardButton("üö´", callback_data="None")
    else:
        choose_statement_forward = InlineKeyboardButton("-->", callback_data="choose_statement_forward")
    reload_my_statement = InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data='reload_my_statement')
    back_to_menu_statements = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='statements')
    markup.add(choose_statement_back, choose_statement_forward)
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    markup.add(reload_my_statement, back_to_menu_statements)
    return markup


def choose_statement_to_create(statement_id, last, first):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    button = InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É ‚¨Üüì®', callback_data='order_' + str(statement_id))
    markup.add(button)
    markup.row_width = 2  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    if first:
        choose_statement_to_create_back = InlineKeyboardButton("üö´", callback_data='None')
    else:
        choose_statement_to_create_back = InlineKeyboardButton("<--", callback_data='choose_statement_to_create_back')
    if last:
        choose_statement_to_create_forward = InlineKeyboardButton("üö´",
                                                                  callback_data="None")
    else:
        choose_statement_to_create_forward = InlineKeyboardButton("-->",
                                                                  callback_data="choose_statement_to_create_forward")

    back_to_menu_statements = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='statements')
    markup.add(choose_statement_to_create_back, choose_statement_to_create_forward)
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    markup.add(back_to_menu_statements)
    return markup


def create__statement__confirm():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    next_step = InlineKeyboardButton('–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã', callback_data='create__statement__confirmed')
    back_to_menu_statement = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='statements')
    markup.add(next_step, back_to_menu_statement)
    return markup


def my_statements(statement_id, flag):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    button = InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É ‚¨Üüì®', callback_data='order_' + str(statement_id))
    markup.add(button)
    if flag:
        back_to_menu_statements = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='statements')
        markup.add(back_to_menu_statements)
    return markup


def order_statement(value):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    send_statement = InlineKeyboardButton('–î–∞ ‚úÖ', callback_data='send_statement_' + value)
    back_to_choose_statement = InlineKeyboardButton('–ù–µ—Ç', callback_data='create__statement__confirmed')
    markup.add(send_statement, back_to_choose_statement)
    return markup


def back_to_menu_statements():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    back_to_menu_statements = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='statements')
    markup.add(back_to_menu_statements)
    return markup


def back_to_choose_statement():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    back_to_choose_statement = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='create__statement__confirmed')
    markup.add(back_to_choose_statement)
    return markup


@dp.message_handler(state=State_list.waiting_login_email, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'contact'])
async def logging_in(message: types.Message, state: FSMContext):
    global globalVar
    async with state.proxy() as data:
        chat_id = data['id']
        id = data['bot_message_id']
    logs = list()
    logs.append(message.text)
    if message.text is not None:
        if message.text.lower() == '/start':
            await error_func(message.chat.id, message.message_id)
        else:
            globalVar[str(message.chat.id)]['to_delete'].append(id)
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
            if validate_email(logs[0]):
                await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', message.chat.id, id)
                a = await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', reply_markup=back3())  # editing = 2
                globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
                globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
                async with state.proxy() as data:
                    data['id'] = message.chat.id
                    data['bot_message_id'] = a.message_id
                    data['logs'] = logs
                await State_list.waiting_login_password.set()

            else:
                await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', message.chat.id, id)
                d = await bot.send_message(message.chat.id, '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                reply_markup=back())  # editing = 2
                globalVar[str(message.chat.id)]['message_id'] = str(d.message_id)
                globalVar[str(message.chat.id)]['message_id_time_send'] = str(d.date)
    else:
        globalVar[str(message.chat.id)]['to_delete'].append(id)
        globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
        await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', message.chat.id, id)  # editing = 0
        d = await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π'
                                              ' –≤ —á–∞—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                             reply_markup=back())  # editing = 2
        globalVar[str(message.chat.id)]['message_id'] = str(d.message_id)
        globalVar[str(message.chat.id)]['message_id_time_send'] = str(d.date)


@dp.message_handler(state=State_list.waiting_login_password, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'contact'])
async def logging_in2(message: types.Message, state: FSMContext):
    global globalVar
    async with state.proxy() as data:
        chat_id = data['id']
        id = data['bot_message_id']
        logs = data['logs']

    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await state.reset_state()
    logs.append(message.text)

    if message.text is not None:
        if message.text.lower() == '/start':
            await error_func(message.chat.id, message.message_id)
        else:
            globalVar[str(message.chat.id)]['to_delete'].append(id)
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
            if len(message.text) > 7:
                s = requests.Session()
                payload = {"email": logs[0].lower(), "password": logs[1]}
                send_to = f'telegram/connect/{str(message.chat.id)}'
                r = s.post(f'{url}/{send_to}', json=payload)
                try:
                    if json.loads(r.text)['user'] and json.loads(r.text)['user']['emailVerified']:
                        await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', message.chat.id, id)  # editing = 0
                        a = await bot.send_message(message.chat.id, '–í—ã –≤–æ—à–ª–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!‚úÖ',
                                             reply_markup=menu_authorized())
                        globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
                        globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
                    else:
                        await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', message.chat.id, id)  # editing = 0
                        a = await bot.send_message(message.chat.id,
                                            '–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ—á—Ç—É! –ù–∞ –≤–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ'
                                            ' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –ø–∏—Å—å–º–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.',
                                            reply_markup=menu())  # editing = 4
                        globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
                        globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
                        exit(message.chat.id)
                except Exception:
                        await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', message.chat.id, id)  # editing = 0
                        mes = json.loads(r.text)['message']
                        a = await bot.send_message(message.chat.id, f'{mes}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                            reply_markup=menu())
                        globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
                globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
                await deleting(message.chat.id)
            else:
                await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', message.chat.id, id)  # editing = 0
                d = await bot.send_message(message.chat.id, '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è'
                                                      ' - 8\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                     reply_markup=back())  # editing = 2
                globalVar[str(message.chat.id)]['message_id'] = str(d.message_id)
                globalVar[str(message.chat.id)]['message_id_time_send'] = str(d.date)
    else:
        globalVar[str(message.chat.id)]['to_delete'].append(id)
        globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
        await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', message.chat.id, id)  # editing = 0
        d = await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π'
                                              ' –≤ —á–∞—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                             reply_markup=back())  # editing = 2
        globalVar[str(message.chat.id)]['message_id'] = str(d.message_id)
        globalVar[str(message.chat.id)]['message_id_time_send'] = str(d.date)


async def delete_message(id, bot_message_id):
    await bot.delete_message(id, bot_message_id)


async def deleting(chat_id):
    if len(globalVar[str(chat_id)]['to_delete']) != 0:
        tasks = list()
        for message in globalVar[str(chat_id)]['to_delete']:
            tasks.append(asyncio.create_task(delete_message(chat_id, message)))
        await asyncio.gather(*tasks)
    globalVar[str(chat_id)]['to_delete'] = list()


def check(id):
    s = requests.Session()
    send_to = f'telegram/user/{str(id)}'
    r = s.get(f'{url}/{send_to}')
    try:
        if json.loads(r.text)['user']:
            return True
    except Exception:
        return False


def understand():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    understand = InlineKeyboardButton('–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!', callback_data='delete_notification')
    markup.add(understand)
    return markup

def understand1():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    understand = InlineKeyboardButton('–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!', callback_data='delete_notification1')
    markup.add(understand)
    return markup


def exit(id):
    s = requests.Session()
    send_to = f'telegram/disconnect/{str(id)}'
    s.post(f'{url}/{send_to}')


def back_to_menu_appeals2():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    upload_my_appeal = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='upload_my_appeal')
    markup.add(upload_my_appeal)
    return markup


def back_to_menu_appeals1():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    back_to_menu_appeal = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_appeals')
    reload_my_appeal = InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data='reload_my_appeal')
    markup.add(reload_my_appeal, back_to_menu_appeal)
    return markup


def back_to_menu_appeals():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    back_to_menu_appeal = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_appeals')
    markup.add(back_to_menu_appeal)
    return markup

def back_to_menu_choose_meter():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    back_to_menu_choose_meter = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_choose_meter')
    markup.add(back_to_menu_choose_meter)
    return markup

def back_to_menu_choose_meter1():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    back_to_menu_choose_meter = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_choose_meter')
    update_meter = InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ üîÅ", callback_data="update_meter")
    markup.add(update_meter, back_to_menu_choose_meter)
    return markup


def back3():
    markup = InlineKeyboardMarkup()
    back_to_menu = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu')
    markup.add(back_to_menu)
    return markup


def back2():
    markup = InlineKeyboardMarkup()
    back_to_menu_authorized = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu_authorized')
    markup.add(back_to_menu_authorized)
    return markup


def back():
    markup = InlineKeyboardMarkup()
    log_in = InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ üîÅ', callback_data='log_in')
    back_to_menu = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu')
    markup.add(back_to_menu, log_in)
    return markup


def upload_my_appeal_again():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    create_appeal = InlineKeyboardButton('–î–∞', callback_data='create__appeal')
    back_to_menu_appeals = InlineKeyboardButton('–ù–µ—Ç', callback_data='back_to_menu_appeals')
    markup.add(create_appeal, back_to_menu_appeals)
    return markup



def upload_my_appeal0():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    send_text = InlineKeyboardButton('–î–∞', callback_data='send_text')
    back_to_menu_appeals = InlineKeyboardButton('–ù–µ—Ç', callback_data='back_to_menu_appeals')
    markup.add(send_text, back_to_menu_appeals)
    return markup


def upload_my_appeal():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    send_appeal = InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –±–µ–∑ —Ñ–æ—Ç–æ', callback_data='send_appeal')
    back_to_menu_appeals = InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu_appeals')
    send_photo = InlineKeyboardButton('–î–∞ üì∏', callback_data='send_photo')
    markup.add(send_photo, send_appeal, back_to_menu_appeals)
    return markup

def upload_my_appeal1():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    send_appeal = InlineKeyboardButton('–î–∞ ‚úÖ', callback_data='send_appeal')
    back_to_menu_appeals = InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu_appeals')
    markup.add(send_appeal, back_to_menu_appeals)
    return markup

async def create_statement_now(id, bot_message_id):
    await bot.delete_message(id, bot_message_id)
    await deleting(id)

    s = requests.Session()
    send_to = f'houses-from-tg/{id}/statements'
    r = s.get(f'{url}/{send_to}')
    statements = json.loads(r.text)['statements']
    a = None
    if len(statements) != 0:
        start = int(globalVar[str(id)]['move'])
        print(globalVar)
        for statement_id in range(start, start + 3):
            if len(statements) <= 3 and statement_id == len(statements) - 1:
                a = await bot.send_message(id,
                                        f'{statement_id + 1}/{len(statements)}\n{statements[statement_id]["name"]}',
                                        reply_markup=my_statements(statement_id, True))
                break
            elif statement_id == start + 2 or statement_id == len(statements) - 1:
                if statement_id in [0,1,2]:
                    a = await bot.send_message(id,
                                            f'{statement_id + 1}/{len(statements)}\n{statements[statement_id]["name"]}',
                                            reply_markup=choose_statement_to_create(statement_id, False, True))
                elif statement_id in [3*(len(statements)//3), 3*(len(statements)//3) + 1, 3*(len(statements)//3) + 2]:
                    a = await bot.send_message(id, f'{statement_id + 1}/{len(statements)}\n{statements[statement_id]["name"]}',
                                        reply_markup=choose_statement_to_create(statement_id, True, False))
                else:
                    a = await bot.send_message(id,
                                            f'{statement_id + 1}/{len(statements)}\n{statements[statement_id]["name"]}',
                                            reply_markup=choose_statement_to_create(statement_id, False, False))
                break
            else:
                a = await bot.send_message(id,
                                        f'{statement_id + 1}/{len(statements)}\n{statements[statement_id]["name"]}',
                                        reply_markup=my_statements(statement_id, False))
                globalVar[str(id)]['to_delete'].append(a.message_id)

    else:
        a = await bot.send_message(id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç',
                             reply_markup=back_to_menu_statements())
    globalVar[str(id)]['message_id'] = str(a.message_id)


@dp.message_handler(state=State_list.waiting_create_appeal, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'contact'])
async def create_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        id = data['id']
        bot_message_id = data['bot_message_id']
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await state.reset_state()
    if message.text is not None:
        if message.text.lower() == '/start':
            await error_func(message.chat.id, message.message_id)
        else:
            await bot.edit_message_text('–û–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É:', message.chat.id, bot_message_id)
            globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
            globalVar[str(message.chat.id)]['appeal_text'] = message.text
            a = await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–µ?',
                                reply_markup=upload_my_appeal())
            globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
            globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)

    elif message.photo != None and message.caption == None:
        await bot.edit_message_text('–û–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É:', message.chat.id, bot_message_id)
        globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
        globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)

        file_info = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
        src = 'uploads/' + file_info.file_path
        await message.photo[-1].download(src)
        globalVar[str(message.chat.id)]['photo_url'] = src
        text = '–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ.\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É:'
        a = await bot.send_message(message.chat.id, text, reply_markup=back_to_menu_appeals())
        globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
        globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
        async with state.proxy() as data:
            data['id'] = message.chat.id
            data['bot_message_id'] = a.message_id
            data['text'] = text
        await State_list.waiting_appeal_text.set()

    elif message.photo != None and message.caption != None:
        await bot.edit_message_text('–û–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É:', message.chat.id, bot_message_id)
        globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
        globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
        globalVar[str(message.chat.id)]['appeal_text'] = message.caption

        file_info = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
        src = 'uploads/' + file_info.file_path
        await message.photo[-1].download(src)
        globalVar[str(message.chat.id)]['photo_url'] = src

        a = await bot.send_message(message.chat.id, '–ñ–∞–ª–æ–±–∞ –≥–æ—Ç–æ–≤–∞! –û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=upload_my_appeal1())
        globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
        globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)

    else:
        await bot.edit_message_text('–û–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É:', message.chat.id, bot_message_id)
        globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
        globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
        a = await bot.send_message(message.chat.id, '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç!\n–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥?',
                             reply_markup=upload_my_appeal_again())
        globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
        globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)


@dp.message_handler(state=State_list.waiting_appeal_text, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'contact'])
async def send_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        id = data['id']
        bot_id_message = data['bot_message_id']
        text = data['text']
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await state.reset_state()
    if message.text is not None:
        if message.text.lower() == '/start':
            await error_func(message.chat.id, message.message_id)
        else:
            await bot.edit_message_text(text, message.chat.id, bot_id_message)
            globalVar[str(message.chat.id)]['appeal_text'] = message.text
            a = await bot.send_message(message.chat.id, '–ñ–∞–ª–æ–±–∞ –≥–æ—Ç–æ–≤–∞! –û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=upload_my_appeal1())
            globalVar[str(message.chat.id)]['to_delete'].append(bot_id_message)
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
            globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
            globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
    else:
        await bot.edit_message_text(text, message.chat.id, bot_id_message)
        a = await bot.send_message(message.chat.id, '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç! –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞?',
                             reply_markup=upload_my_appeal0())
        globalVar[str(message.chat.id)]['to_delete'].append(bot_id_message)
        globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
        globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
        globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)


@dp.message_handler(state=State_list.waiting_appeal_photo, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'contact'])
async def send_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        id = data['id']
        bot_id_message = data['bot_message_id']
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await state.reset_state()
    await bot.edit_message_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–æ–∑–Ω–∏–∫—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:', message.chat.id, bot_id_message)
    try:
        if message.caption is None:
            file_info = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
            src = 'uploads/' + file_info.file_path
            await message.photo[-1].download(src)
            globalVar[str(message.chat.id)]['photo_url'] = src
            a = await bot.send_message(message.chat.id, '–ñ–∞–ª–æ–±–∞ –≥–æ—Ç–æ–≤–∞! –û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=upload_my_appeal1())
            globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
            globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
            globalVar[str(message.chat.id)]['to_delete'].append(bot_id_message)
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
        else:
            a = await bot.send_message(message.chat.id, '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞!',
                                 reply_markup=back_to_menu_appeals())
            globalVar[str(message.chat.id)]['photo_url'] = 'error'
            globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
            globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
            globalVar[str(message.chat.id)]['to_delete'].append(bot_id_message)
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
    except Exception:
        if message.text is not None:
            if message.text.lower() == '/start':
                await error_func(message.chat.id, message.message_id)
            else:
                a = await bot.send_message(message.chat.id, '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–æ—Ç–æ! –•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–µ?',
                                     reply_markup=upload_my_appeal())
                globalVar[str(message.chat.id)]['photo_url'] = 'error'
                globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
                globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
                globalVar[str(message.chat.id)]['to_delete'].append(bot_id_message)
                globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
        else:
            a = await bot.send_message(message.chat.id, '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–æ—Ç–æ! –•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–µ?',
                            reply_markup=upload_my_appeal())
            globalVar[str(message.chat.id)]['photo_url'] = 'error'
            globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
            globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
            globalVar[str(message.chat.id)]['to_delete'].append(bot_id_message)
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)


async def send_appeal(id, bot_message_id):
    s = requests.Session()
    payload = {"text": globalVar[str(id)]['appeal_text']}
    send_to = f'appeals-from-tg/{str(id)}/create-complaint'
    if globalVar[str(id)]['photo_url'] != '' and globalVar[str(id)]['photo_url'] != 'error':
        files = {'image': (globalVar[str(id)]['photo_url'],
                        open(globalVar[str(id)]['photo_url'], 'rb'))}
        s.post(f'{url}/{send_to}', data=payload, files=files)
    else:
        s.post(f'{url}/{send_to}', json=payload)
    await bot.edit_message_text('–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞', id, bot_message_id, reply_markup=back_to_menu_appeals())
    globalVar[str(id)]['appeal_text'] = ''


@dp.message_handler(state=State_list.waiting_hot_water, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'contact'])
async def hot_water_update(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        id = data['id']
        bot_message_id = data['bot_message_id']
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await state.reset_state()
    if message.text is not None:
        if message.text.lower() == '/start':
            await error_func(message.chat.id, message.message_id)
        elif message.text.isdigit():
            await bot.edit_message_reply_markup(message.chat.id, message.message_id, reply_markup=None)
            logs = list()
            logs.append(str(int(message.text)))
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
            globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
            a = await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ *–•–í–°*:', parse_mode="Markdown",
                                 reply_markup=back_to_menu_choose_meter())
            globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
            globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
            async with state.proxy() as data:
                data['id'] = message.chat.id
                data['bot_message_id'] = a.message_id
                data['logs'] = logs
            await State_list.waiting_cold_water.set()

        else:
            await bot.edit_message_reply_markup(message.chat.id, message.message_id, reply_markup=None)
            a = await bot.send_message(message.chat.id,
                                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
                                 reply_markup=back_to_menu_choose_meter1())
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
            globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
            globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
            globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)

    else:
        await bot.edit_message_reply_markup(message.chat.id, message.message_id, reply_markup=None)
        a = await bot.send_message(message.chat.id,
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π',
                         reply_markup=back_to_menu_choose_meter1())
        globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
        globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
        globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
        globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)


@dp.message_handler(state=State_list.waiting_cold_water, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'contact'])
async def cold_water_update(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        id = data['id']
        bot_message_id = data['bot_message_id']
        logs = data['logs']
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await state.reset_state()
    if message.text is not None:
        if message.text.lower() == '/start':
            await error_func(message.chat.id, message.message_id)
        elif message.text.isdigit():
            await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ *–•–í–°*:', message.chat.id, bot_message_id,
                                  parse_mode="Markdown")
            logs.append(str(int(message.text)))
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
            globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
            a = await bot.send_message(message.chat.id, '–ü–æ–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã. –û—Ç–ø—Ä–∞–≤–∏—Ç—å?', parse_mode="Markdown",
                                 reply_markup=send_meter())
            globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
            globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
            globalVar[str(message.chat.id)]['meter'] = logs
        else:
            await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ *–•–í–°*:', message.chat.id, bot_message_id,
                                  parse_mode="Markdown")
            a = await bot.send_message(message.chat.id,
                                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
                                 reply_markup=back_to_menu_choose_meter1())
            globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
            globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
            globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
            globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)
    else:
        await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ *–•–í–°*', message.chat.id, bot_message_id,
                              parse_mode="Markdown")
        a = await bot.send_message(message.chat.id,
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π',
                         reply_markup=back_to_menu_choose_meter1())
        globalVar[str(message.chat.id)]['to_delete'].append(message.message_id)
        globalVar[str(message.chat.id)]['to_delete'].append(bot_message_id)
        globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
        globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)


async def send_meter1(id):
    s = requests.Session()
    payload = {"hotWater": globalVar[str(id)]['meter'][0],"coldWater": globalVar[str(id)]['meter'][1]}
    url = 'http://renat-hamatov.ru'
    send_to = f'telegram/user/meter-update/{id}'
    r = s.post(f'{url}/{send_to}', json=payload)
    try:
        if json.loads(r.text)['user']:
            await bot.delete_message(id, globalVar[str(id)]['message_id'])
            a = await bot.send_message(id, '–ü–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!',
                             reply_markup=back_to_menu_choose_meter())
            globalVar[str(id)]['message_id'] = str(a.message_id)
    except Exception:
        text = json.loads(r.text)['message']
        await bot.delete_message(id, globalVar[str(id)]['message_id'])
        a = await bot.send_message(id, f'{text}', reply_markup=back_to_menu_choose_meter1())
        globalVar[str(id)]['message_id'] = str(a.message_id)


async def my_appeals(id):
    s = requests.Session()
    send_to = f'appeals-from-tg/{str(id)}/my'
    r = s.get(f'{url}/{send_to}')
    appeals = json.loads(r.text)['appeals']
    appeals = appeals[::-1]
    a = None

    def filter_set(appeals):
        def iterator_func(x):
            if "complaint" == x.get("type"):
                return True
            else:
                return False

        return filter(iterator_func, appeals)

    appeals = list(filter_set(appeals))
    if len(appeals) != 0:
        appeal_id = int(globalVar[str(id)]['move'])
        t = appeals[appeal_id]
        date = str(t['dateOfRequest'])
        status = str(t['status'])
        text = str(t['text'])
        img = t['image']
        rejectReason = ''
        last, first = False, False
        if appeal_id == len(appeals) - 1:
            last = True
        elif appeal_id == 0:
            first = True

        if status == 'waiting':
            status = '–û–∂–∏–¥–∞–Ω–∏–µ ‚è≥'
        elif status == 'in_work':
            status = '–í —Ä–∞–±–æ—Ç–µ ‚öí'
        elif status == 'done':
            status = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ "
        elif status == 'rejected':
            status = '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå'
            rejectReason = t['rejectReason']
            rejectReason = f'\n\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n*{rejectReason}*'
        try:
            if len(appeals)-1 == 0:
                if img != 'not image':
                    img = f'{url}{img}'
                    await bot.delete_message(id, int(globalVar[str(id)]['message_id']))
                    a = await bot.send_photo(photo=img, caption=f'{appeal_id + 1}/{len(appeals)}\n'
                                        f'–î–∞—Ç–∞: *{date}*\n'
                                        f'–°—Ç–∞—Ç—É—Å: *{status}*{rejectReason}\n\n–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n*{text}*',
                                        parse_mode="Markdown",
                                        chat_id=id, reply_markup=back_to_menu_appeals1())
                else:
                    await bot.delete_message(id, int(globalVar[str(id)]['message_id']))
                    a = await bot.send_message(id, f'{appeal_id + 1}/{len(appeals)}\n'
                                                f'–î–∞—Ç–∞: *{date}*\n'
                                                f'–°—Ç–∞—Ç—É—Å: *{status}*{rejectReason}\n\n–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n*{text}*',
                                            reply_markup=back_to_menu_appeals1(), parse_mode="Markdown")
            else:
                if img != 'not image':
                    img = f'{url}{img}'
                    await bot.delete_message(id, int(globalVar[str(id)]['message_id']))
                    a = await bot.send_photo(photo=img, caption=f'{appeal_id + 1}/{len(appeals)}\n'
                                                    f'–î–∞—Ç–∞: *{date}*\n'
                                                    f'–°—Ç–∞—Ç—É—Å: *{status}*{rejectReason}\n'
                                                    f'\n–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n*{text}*',
                                                    parse_mode="Markdown",
                                                    chat_id=id, reply_markup=choose_appeal(last, first))
                else:
                    await bot.delete_message(id, int(globalVar[str(id)]['message_id']))
                    a = await bot.send_message(id, f'{appeal_id + 1}/{len(appeals)}\n'
                                                f'–î–∞—Ç–∞: *{date}*\n'
                                                f'–°—Ç–∞—Ç—É—Å: *{status}*{rejectReason}\n\n–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n*{text}*',
                                                reply_markup=choose_appeal(last, first), parse_mode="Markdown")
            #–ï—Å–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ç–æ –ø—É—Å—Ç—å edit_message_media, –∏–Ω–∞—á–µ edit_message_text"""

        except Exception:
            None
    else:
        await deleting(id)
        await bot.delete_message(id, int(globalVar[str(id)]['message_id']))
        b = await bot.send_message(id, '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∂–∞–ª–æ–±—ã')
        a = await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=back_to_menu_appeals1())
        globalVar[str(id)]['to_delete'].append(b.message_id)
    if a is not None:
        globalVar[str(id)]['message_id'] = str(a.message_id)


async def my_statement(id):
    s = requests.Session()
    send_to = f'appeals-from-tg/{str(id)}/my'
    r = s.get(f'{url}/{send_to}')
    appeals = json.loads(r.text)['appeals']
    appeals = appeals[::-1]
    a = None

    def filter_set(appeals):
        def iterator_func(x):
            if "statement" == x.get("type"):
                return True
            else:
                return False

        return filter(iterator_func, appeals)

    appeals = list(filter_set(appeals))
    if len(appeals) != 0:
        appeal_id = int(globalVar[str(id)]['move'])
        t = appeals[appeal_id]
        date = str(t['dateOfRequest'])
        status = str(t['status'])
        text = str(t['text'])[16:-1]
        rejectReason = ''
        last, first = False, False
        if appeal_id == len(appeals) - 1:
            last = True
        elif appeal_id == 0:
            first = True

        if status == 'waiting':
            status = '–û–∂–∏–¥–∞–Ω–∏–µ ‚è≥'
        elif status == 'in_work':
            status = '–í —Ä–∞–±–æ—Ç–µ ‚öí'
        elif status == 'done':
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ ‚úÖ "
        elif status == 'rejected':
            status = '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå'
            rejectReason = t['rejectReason']
            rejectReason = f'\n\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n*{rejectReason}*'
        if len(appeals)-1 == 0:
            await bot.delete_message(id, int(globalVar[str(id)]['message_id']))
            a = await bot.send_message(text=f'{appeal_id + 1}/{len(appeals)}\n'
                                                        f'–î–∞—Ç–∞: *{date}*\n'
                                                        f'–°—Ç–∞—Ç—É—Å: *{status}*{rejectReason}\n\n–°–ø—Ä–∞–≤–∫–∞:\n*{text}*',
                                    parse_mode="Markdown",
                                    chat_id=id, reply_markup=back_to_menu_statements())
        else:
            await bot.delete_message(id, int(globalVar[str(id)]['message_id']))
            a = await bot.send_message(id, f'{appeal_id + 1}/{len(appeals)}\n'
                                            f'–î–∞—Ç–∞: *{date}*\n'
                                            f'–°—Ç–∞—Ç—É—Å: *{status}*{rejectReason}\n\n–°–ø—Ä–∞–≤–∫–∞:\n*{text}*',
                                        reply_markup=choose_statement(last,first), parse_mode="Markdown")

        #–ï—Å–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ç–æ –ø—É—Å—Ç—å edit_message_media, –∏–Ω–∞—á–µ edit_message_text"""

    else:
        await deleting(id)
        await bot.delete_message(id, int(globalVar[str(id)]['message_id']))
        b = await bot.send_message(id, '–í—ã –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏')
        a = await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=back_to_menu_statements())
        globalVar[str(id)]['to_delete'].append(b.message_id)
    if a is not None:
        globalVar[str(id)]['message_id'] = str(a.message_id)


async def error_func(id,bot_message_id):
    if str(id) not in globalVar:
        globalVar[str(id)] = {}
        globalVar[str(id)]['to_delete'] = list()
        globalVar[str(id)]['topic'] = None
        globalVar[str(id)]['error_messages'] = None
        globalVar[str(id)]['message_id'] = ''
        globalVar[str(id)]['message_id_time_send'] = ''
        globalVar[str(id)]['move'] = '0'
        globalVar[str(id)]['appeal_text'] = ''
        globalVar[str(id)]['photo_url'] = ''
        globalVar[str(id)]['meter'] = list()
        globalVar[str(id)]['help_message'] = list()
    try:
        await bot.delete_message(id, int(globalVar[str(id)]['error_messages']))
    except Exception:
        None
    await bot.delete_message(id, bot_message_id)
    a = await bot.send_message(id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏. \n'
                                      '–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n'
                             '–ï—Å–ª–∏ —É –≤–∞—Å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –±–æ—Ç–æ–º, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
    globalVar[str(id)]['error_messages'] = a.message_id


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    global globalVar
    print(globalVar)

    if str(message.chat.id) not in globalVar:

        globalVar[str(message.chat.id)] = {}
        globalVar[str(message.chat.id)]['to_delete'] = list()
        globalVar[str(message.chat.id)]['topic'] = None
        globalVar[str(message.chat.id)]['error_messages'] = None
        globalVar[str(message.chat.id)]['message_id'] = ''
        globalVar[str(message.chat.id)]['message_id_time_send'] = ''
        globalVar[str(message.chat.id)]['move'] = '0'
        globalVar[str(message.chat.id)]['appeal_text'] = ''
        globalVar[str(message.chat.id)]['photo_url'] = ''
        globalVar[str(message.chat.id)]['meter'] = list()
        globalVar[str(message.chat.id)]['help_message'] = list()
    if globalVar[str(message.chat.id)]['message_id'] == '':
        await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∂–∏–ª—å—Ü–æ–≤ –¥–æ–º–æ–≤ –£–ö –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!\n\n'
                             '–° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É, –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤'
                             ' –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É. \n–ï—Å–ª–∏ –≤—ã –≤ —á–µ–º-—Ç–æ –∑–∞–ø—É—Ç–∞–ª–∏—Å—å –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π'
                             ' –æ –±–æ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ /help\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞.')
    globalVar[str(message.chat.id)]['move'] = '0'
    globalVar[str(message.chat.id)]['appeal_text'] = ''
    globalVar[str(message.chat.id)]['meter'] = list()
    await deleting(message.chat.id)
    await bot.delete_message(message.chat.id, message.message_id)
    try:
        await bot.delete_message(message.chat.id, int(globalVar[str(message.chat.id)]['message_id']))
    except Exception:
        None

    try:
        await bot.delete_message(message.chat.id, int(globalVar[str(message.chat.id)]['error_messages']))
    except Exception:
        None

    if globalVar[str(message.chat.id)]['photo_url'] != '' and globalVar[str(message.chat.id)]['photo_url'] != 'error':
        os.remove(globalVar[str(message.chat.id)]['photo_url'])
        globalVar[str(message.chat.id)]['photo_url'] = ''

    if check(message.chat.id):
        s = requests.Session()
        send_to = f'telegram/user/{str(message.chat.id)}'
        r = s.get(f'{url}/{send_to}')
        firstname = json.loads(r.text)['user']['fullname'].split()[1].capitalize()
        a = await bot.send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, *{firstname}*!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=menu_authorized(), parse_mode="Markdown")
    else:
        a = await bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu())

    if globalVar[str(message.chat.id)]['topic'] != None:
        await bot.delete_message(message.chat.id, int(globalVar[str(message.chat.id)]['topic']))
        globalVar[str(message.chat.id)]['topic'] = None
    globalVar[str(message.chat.id)]['message_id'] = str(a.message_id)
    globalVar[str(message.chat.id)]['message_id_time_send'] = str(a.date)


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    try:
        await bot.delete_message(message.chat.id, int(globalVar[str(message.chat.id)]['error_messages']))
    except Exception:
        None
    if len(globalVar[str(message.chat.id)]['help_message']) != 0:
        for id in globalVar[str(message.chat.id)]['help_message']:
            await bot.delete_message(message.chat.id, id)
    globalVar[str(message.chat.id)]['help_message'] = list()
    a = await bot.send_media_group(message.chat.id, media=[(InputMediaPhoto(media='https://github.com/NoName2201/tg_bot/blob/master/photos_help/0.jpg?raw=true', caption='–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é.\n'
                                                                                                                                                               '–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.')),
                                                 (InputMediaPhoto(media='https://github.com/NoName2201/tg_bot/blob/master/photos_help/1.jpg?raw=true', caption='–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n'
                                                                                                                                                               '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞—à—É –ø–æ—á—Ç—É –∏ –ø–∞—Ä–æ–ª—å')),
                                                 (InputMediaPhoto(media='https://github.com/NoName2201/tg_bot/blob/master/photos_help/2.jpg?raw=true', caption='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é\n'
                                                                                                                                                               '–í—ã –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤—ã–±–æ—Ä\n'
                                                                                                                                                               '‚Ä¢ –ñ–∞–ª–æ–±—ã (–ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –ø–æ–¥–∞—á—É –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±)\n'
                                                                                                                                                               '‚Ä¢ –°—á—ë—Ç—á–∏–∫–∏ (–ø–æ–∑–≤–æ–ª—è—é—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥ —Å 20 –ø–æ 25 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞\n'
                                                                                                                                                               '‚Ä¢ –°–ø—Ä–∞–≤–∫–∏ (–æ—Ç–∫—Ä—ã–≤–∞—é—Ç –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø—Ä–∞–≤–æ–∫')),
                                                 (InputMediaPhoto(media='https://github.com/NoName2201/tg_bot/blob/master/photos_help/3.jpg?raw=true', caption='–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã\n'
                                                                                                                                                               '–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º –≤–∞–º —Ñ–æ—Ä–º–∞—Ç–µ\n'
                                                                                                                                                               '(—Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏; —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)')),
                                                 (InputMediaPhoto(media='https://github.com/NoName2201/tg_bot/blob/master/photos_help/4.jpg?raw=true', caption='–ü—Ä–∏–º–µ—Ä –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã —Å —Ñ–æ—Ç–æ')),
                                                 (InputMediaPhoto(media='https://github.com/NoName2201/tg_bot/blob/master/photos_help/5.jpg?raw=true', caption='–ú–µ–Ω—é –≤–∞—à–∏—Ö –∂–∞–ª–æ–±\n'
                                                                                                                                                               '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–∞–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã')),
                                                 (InputMediaPhoto(media='https://github.com/NoName2201/tg_bot/blob/master/photos_help/6.jpg?raw=true', caption='–ó–∞–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏\n'
                                                                                                                                                               '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –ø—Ä–æ—Å–∏—Ç —É –≤–∞—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n'
                                                                                                                                                               '–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–º —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"')),
                                                 (InputMediaPhoto(media='https://github.com/NoName2201/tg_bot/blob/master/photos_help/7.jpg?raw=true', caption='–ü–æ–¥–∞—á–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤\n'
                                                                                                                                                               '–î–∞–Ω–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–∏–æ–¥ —Å 20 –ø–æ 25 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞\n'
                                                                                                                                                               '–ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –¥–∞–Ω–Ω—ã—Ö - –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Ç–∞–∫ –∫–∞–∫ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –≤–µ—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è')),
                                                 (InputMediaPhoto(media='https://github.com/NoName2201/tg_bot/blob/master/photos_help/8.jpg?raw=true', caption='–ü–æ–¥–∞—á–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤'))
                                                 ])

    for id in a:
        globalVar[str(message.chat.id)]['help_message'].append(id.message_id)
    a = await bot.send_message(message.chat.id, '–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\nsupport@prof-uk.ru', reply_markup=understand1())
    globalVar[str(message.chat.id)]['help_message'].append(a.message_id)


@dp.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'contact'])
async def error(message: types.Message):
    await error_func(message.chat.id, message.message_id)


@dp.callback_query_handler(lambda c: c.data, state='*')
async def callback_query(call: types.CallbackQuery, state: FSMContext):
    try:
        global url, globalVar
        cmcd = call.message.chat.id
        cmmi = call.message.message_id
        print(cmcd, call.data)
        print(globalVar)
        try:
            await bot.delete_message(cmcd, int(globalVar[str(cmcd)]['error_messages']))
        except Exception:
            None

        if call.data == "log_in":
            a = await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
                                  cmcd, cmmi, reply_markup=back3())
            await deleting(cmcd)
            async with state.proxy() as data:
                data['id'] = cmcd
                data['bot_message_id'] = a.message_id
            await State_list.waiting_login_email.set()

        elif call.data == 'registration':
            await bot.delete_message(cmcd, cmmi)
            a = await bot.send_message(cmcd, f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç–µ:\nhttps://prof-uk.ru/signup', reply_markup=back3())
            globalVar[str(cmcd)]['message_id'] = str(a.message_id)

        elif call.data == 'appeals':
            await bot.delete_message(cmcd, cmmi)
            a = await bot.send_message(cmcd, '*–ñ–∞–ª–æ–±—ã*', parse_mode="Markdown")
            b = await bot.send_message(cmcd, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=menu_appeals())
            await deleting(cmcd)
            globalVar[str(cmcd)]['topic'] = str(a.message_id)
            globalVar[str(cmcd)]['message_id'] = str(b.message_id)

        elif call.data == 'meter':
            await bot.delete_message(cmcd, cmmi)
            a = await bot.send_message(cmcd, '*–°—á—ë—Ç—á–∏–∫–∏*', parse_mode="Markdown")
            s = requests.Session()
            send_to = f'telegram/user/{cmcd}'
            r = s.get(f'{url}/{send_to}')
            await deleting(cmcd)
            if json.loads(r.text)['user']['meterReadings']:
                hotWaterSupply = json.loads(r.text)['user']['meterReadings'][-1]['hotWaterSupply']
                coldWaterSupply = json.loads(r.text)['user']['meterReadings'][-1]['coldWaterSupply']

                date = (json.loads(r.text)['user']['meterReadings'][-1]['time'])
                today = int(str(datetime.date.today()).split('-')[2])
                month = int(str(datetime.date.today()).split('-')[1])
                if today > 19 and today < 26\
                        and int(json.loads(r.text)['user']['meterReadings'][-1]['time'].split('.')[1]) != month:
                    b = await bot.send_message(cmcd,f'–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:\n'
                                              f'\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: *{date}*\n'
                                              f'\n–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞: *{coldWaterSupply}*'
                                              f'\n–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: *{hotWaterSupply}*',
                                         parse_mode='Markdown', reply_markup=menu_meter())
                elif today < 20:
                    b = await bot.send_message(cmcd, f'–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:\n'
                                               f'\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: *{date}*\n'
                                               f'\n–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞: *{coldWaterSupply}*'
                                               f'\n–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: *{hotWaterSupply}*'
                                               f'\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ,'
                                               f' –≤ –ø–µ—Ä–∏–æ–¥ —Å 20 –ø–æ 25 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞',
                                         parse_mode='Markdown')
                    globalVar[str(cmcd)]['to_delete'].append(b.message_id)
                    b = await bot.send_message(cmcd, '–ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö,'
                                               ' –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ä–∞–∑–¥–µ–ª–µ *"–ñ–∞–ª–æ–±—ã"*', parse_mode='Markdown',
                                         reply_markup=back2())
                else:
                    b = await bot.send_message(cmcd, f'–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:\n'
                                               f'\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: *{date}*\n'
                                               f'\n–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞: *{coldWaterSupply}*'
                                               f'\n–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: *{hotWaterSupply}*'
                                               f'\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ,'
                                               f' –≤ –ø–µ—Ä–∏–æ–¥ —Å 20 –ø–æ 25 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞',
                                         parse_mode='Markdown')
                    globalVar[str(cmcd)]['to_delete'].append(b.message_id)
                    b = await bot.send_message(cmcd, '–ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö,'
                                               ' –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ä–∞–∑–¥–µ–ª–µ *"–ñ–∞–ª–æ–±—ã"*', parse_mode='Markdown',
                                         reply_markup=back2())
            else:
                today = int(str(datetime.date.today()).split('-')[2])
                if today > 19 and today < 26:
                    b = await bot.send_message(cmcd, '–£ –≤–∞—Å –æ—Ç—Å—Ç—É—Ç—Å–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–æ–≤. –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å?',
                                     reply_markup=menu_meter())
                elif today < 20:
                    b = await bot.send_message(cmcd,
                                         '–£ –≤–∞—Å –æ—Ç—Å—Ç—É—Ç—Å–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–æ–≤.'
                                         ' –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Ö —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–∏–æ–¥ —Å 20 –ø–æ 25 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞',
                                         reply_markup=back2())
                else:
                    b = await bot.send_message(cmcd, '–£ –≤–∞—Å –æ—Ç—Å—Ç—É—Ç—Å–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–æ–≤.'
                                               ' –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Ö —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ',
                                         reply_markup=back2())
            globalVar[str(cmcd)]['topic'] = str(a.message_id)
            globalVar[str(cmcd)]['message_id'] = str(b.message_id)

        elif call.data == 'create__appeal':
            await deleting(cmcd)
            a = await bot.edit_message_text('–û–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É:', cmcd, cmmi, reply_markup=back_to_menu_appeals())
            async with state.proxy() as data:
                data['id'] = cmcd
                data['bot_message_id'] = a.message_id
            await State_list.waiting_create_appeal.set()

        elif call.data == 'send_text':
            text = '–û–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É:'
            a = await bot.edit_message_text(text, cmcd, cmmi, reply_markup=back_to_menu_appeals())
            b = globalVar[str(cmcd)]['to_delete'].pop()
            c = globalVar[str(cmcd)]['to_delete'].pop()
            await bot.delete_message(cmcd, b)
            await bot.delete_message(cmcd, c)
            async with state.proxy() as data:
                data['id'] = cmcd
                data['bot_message_id'] = a.message_id
                data['text'] = text
            await State_list.waiting_appeal_text.set()

        elif call.data == 'send_photo':
            a = await bot.edit_message_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–æ–∑–Ω–∏–∫—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:', cmcd, cmmi,
                                  reply_markup=back_to_menu_appeals2())
            if globalVar[str(cmcd)]['photo_url'] == 'error':
                b = globalVar[str(cmcd)]['to_delete'].pop()
                c = globalVar[str(cmcd)]['to_delete'].pop()
                await bot.delete_message(cmcd, b)
                await bot.delete_message(cmcd, c)
            async with state.proxy() as data:
                data['id'] = cmcd
                data['bot_message_id'] = a.message_id
            await State_list.waiting_appeal_photo.set()

        elif call.data == 'upload_my_appeal':
            a = await bot.edit_message_text('–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–µ?', cmcd, cmmi,
                                      reply_markup=upload_my_appeal())

        elif call.data == 'send_appeal':
            await send_appeal(cmcd, cmmi)

        elif call.data == 'my__appeals':
            await bot.edit_message_text('–í–∞—à–∏ –∂–∞–ª–æ–±—ã:', cmcd, cmmi)
            await my_appeals(cmcd)

        elif call.data == 'reload_my_appeal':
            await my_appeals(cmcd)

        elif call.data == 'choose_appeal_back':
            globalVar[str(cmcd)]['move'] = str(int(globalVar[str(cmcd)]['move']) - 1)
            await my_appeals(cmcd)

        elif call.data == 'choose_appeal_forward':
            globalVar[str(cmcd)]['move'] = str(int(globalVar[str(cmcd)]['move']) + 1)
            await my_appeals(cmcd)

        elif call.data == 'update_meter':
            await deleting(cmcd)
            await bot.delete_message(cmcd, int(globalVar[str(cmcd)]['message_id']))
            with open('uploads/file_for_meter.jpg', 'rb') as f:
                img = f.read()
            a = await bot.send_photo(photo=img, caption='–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ *–ì–í–°*\n(–¢–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –¥–æ –∑–∞–ø—è—Ç–æ–π):',
                               parse_mode="Markdown",
                               chat_id=cmcd, reply_markup=back_to_menu_choose_meter())
            globalVar[str(cmcd)]['message_id'] = str(a.message_id)
            async with state.proxy() as data:
                data['id'] = cmcd
                data['bot_message_id'] = a.message_id
            await State_list.waiting_hot_water.set()

        elif call.data == 'send_meter':
            await send_meter1(cmcd)

        elif call.data == 'statements':
            await bot.delete_message(cmcd, cmmi)
            globalVar[str(cmcd)]['move'] = str(0)
            await deleting(cmcd)
            if globalVar[str(cmcd)]['topic'] == None:
                a = await bot.send_message(cmcd, '*–°–ø—Ä–∞–≤–∫–∏*', parse_mode="Markdown")
                globalVar[str(cmcd)]['topic'] = str(a.message_id)
            b = await bot.send_message(cmcd, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=menu_statements())
            globalVar[str(cmcd)]['message_id'] = str(b.message_id)

        elif call.data == 'create__statement__question':
            await bot.delete_message(cmcd, cmmi)

            s = requests.Session()
            send_to = f'telegram/user/{cmcd}'
            r = s.get(f'{url}/{send_to}')
            r = json.loads(r.text)
            FNP = r['user']['fullname'].split()
            if FNP[2] != '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
                fullname = f'{FNP[0]} {FNP[1][0]}. {FNP[2][0]}.'
            else:
                fullname = f'{FNP[0]} {FNP[1][0]}.'
            phone = r['user']['phone']
            house = r['user']['house']
            city = house['city']
            address = house['address']
            flat = r['user']['flat']
            if phone[:2] != '+7' and phone[:2] != '8 ':
                pat = "(.*)(\d{4})$"
                mask_part, public_part = re.match(pat, phone).groups()
                phone = re.sub("\d", "#", mask_part) + '-' + public_part
            else:
                pat = "(.*)(-\d{2}-\d{2})$"
                mask_part, public_part = re.match(pat, phone).groups()
                public_part = public_part.split('-')
                phone = re.sub("\d", "#", mask_part) + '-' + public_part[1] + public_part[2]

            a = await bot.send_message(cmcd, f'–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö,'
                                       f' —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n–í–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n\n'
                                       f'–ó–∞–∫–∞–∑—á–∏–∫: *{fullname}*\n'
                                       f'–¢–µ–ª–µ—Ñ–æ–Ω: *{phone}*\n'
                                       f'–ê–¥—Ä–µ—Å: *{city}, {address}, –∫–≤. {flat}*\n\n'
                                       f'–ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,'
                                       f' –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–º —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ñ–∞–ª–æ–±—ã"',
                                 reply_markup=create__statement__confirm(), parse_mode="Markdown")
            globalVar[str(cmcd)]['message_id'] = str(a.message_id)

        elif call.data == 'create__statement__confirmed':
            await create_statement_now(cmcd, cmmi)

        elif call.data == 'choose_statement_to_create_forward':
            globalVar[str(cmcd)]['move'] = str(int(globalVar[str(cmcd)]['move']) + 3)
            await create_statement_now(cmcd, cmmi)

        elif call.data == 'choose_statement_to_create_back':
            globalVar[str(cmcd)]['move'] = str(int(globalVar[str(cmcd)]['move']) - 3)
            await create_statement_now(cmcd, cmmi)

        elif call.data == 'my__statements':
            await bot.edit_message_text('–í–∞—à–∏ —Å–ø—Ä–∞–≤–∫–∏:', cmcd, cmmi)
            await my_statement(cmcd)

        elif call.data == 'reload_my_statement':
            await my_statement(cmcd)

        elif call.data == 'choose_statement_back':
            globalVar[str(cmcd)]['move'] = str(int(globalVar[str(cmcd)]['move']) - 1)
            await my_statement(cmcd)

        elif call.data == 'choose_statement_forward':
            globalVar[str(cmcd)]['move'] = str(int(globalVar[str(cmcd)]['move']) + 1)
            await my_statement(cmcd)


        elif call.data[:6] == 'order_':
            statement_id = int(call.data[6:])
            if cmmi in globalVar[str(cmcd)]['to_delete']:
                globalVar[str(cmcd)]['to_delete'].remove(cmmi)
                await bot.delete_message(cmcd, int(globalVar[str(cmcd)]['message_id']))
                globalVar[str(cmcd)]['message_id'] = str(cmmi)
            await deleting(cmcd)
            globalVar[str(cmcd)]['to_delete'].append(int(globalVar[str(cmcd)]['message_id']))
            s = requests.Session()
            send_to = f'houses-from-tg/{cmcd}/statements'
            r = s.get(f'{url}/{send_to}')
            statements = json.loads(r.text)['statements']
            value = statements[statement_id]['value']
            await bot.edit_message_text(f'{statement_id + 1}/{len(statements)}\n{statements[statement_id]["name"]}', cmcd, cmmi)
            a = await bot.send_message(cmcd, '–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É?', reply_markup=order_statement(value))
            globalVar[str(cmcd)]['message_id'] = str(a.message_id)

        elif call.data[:15] == 'send_statement_':
            s = requests.Session()
            payload = {'value': str(call.data[15:])}
            send_to = f'appeals-from-tg/{cmcd}/order-statement'
            s.post(f'{url}/{send_to}', json=payload)
            await bot.edit_message_text('–°–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–∞–∑–∞–Ω–∞!', cmcd, cmmi, reply_markup=back_to_menu_statements())


        elif call.data == 'exit':
            await bot.edit_message_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞‚ùì', cmcd, cmmi, reply_markup=exit_confirm())

        elif call.data == 'exit_confirmed':
            exit(call.message.chat.id)
            await deleting(cmcd)
            await bot.edit_message_text('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞‚ùó', cmcd, cmmi, reply_markup=menu())

        elif call.data == 'back_to_menu':
            current_state = await state.get_state()
            if current_state is not None:
                await state.finish()
                await state.reset_state()
            await deleting(cmcd)
            await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', cmcd, cmmi, reply_markup=menu())

        elif call.data == 'back_to_menu_authorized':
            try:
                await bot.delete_message(cmcd, int(globalVar[str(cmcd)]['topic']))
            except Exception:
                None
            globalVar[str(cmcd)]['topic'] = None
            current_state = await state.get_state()
            if current_state is not None:
                await state.finish()
                await state.reset_state()
            await deleting(cmcd)
            await bot.delete_message(cmcd, cmmi)
            s = requests.Session()
            send_to = f'telegram/user/{str(cmcd)}'
            r = s.get(f'{url}/{send_to}')
            firstname = json.loads(r.text)['user']['fullname'].split()[1].capitalize()
            a = await bot.send_message(cmcd, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, *{firstname}*!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                     reply_markup=menu_authorized(), parse_mode="Markdown")
            globalVar[str(cmcd)]['message_id'] = str(a.message_id)


        elif call.data == 'back_to_menu_appeals':
            if globalVar[str(cmcd)]['photo_url'] != '' and globalVar[str(cmcd)]['photo_url'] != 'error':
                os.remove(globalVar[str(cmcd)]['photo_url'])
            globalVar[str(cmcd)]['appeal_text'] = ''
            globalVar[str(cmcd)]['photo_url'] = ''
            globalVar[str(cmcd)]['move'] = str(0)
            current_state = await state.get_state()
            if current_state is not None:
                await state.finish()
                await state.reset_state()
            await deleting(cmcd)
            await bot.delete_message(cmcd, globalVar[str(cmcd)]['message_id'])
            a = await bot.send_message(cmcd, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=menu_appeals())
            (globalVar[str(cmcd)]['message_id']) = str(a.message_id)

        elif call.data == 'back_to_menu_choose_meter':
            current_state = await state.get_state()
            if current_state is not None:
                await state.finish()
                await state.reset_state()
            await deleting(cmcd)
            await bot.delete_message(cmcd, globalVar[str(cmcd)]['message_id'])
            s = requests.Session()
            send_to = f'telegram/user/{cmcd}'
            r = s.get(f'{url}/{send_to}')
            await deleting(cmcd)
            if json.loads(r.text)['user']['meterReadings']:
                hotWaterSupply = json.loads(r.text)['user']['meterReadings'][-1]['hotWaterSupply']
                coldWaterSupply = json.loads(r.text)['user']['meterReadings'][-1]['coldWaterSupply']

                today = int(str(datetime.date.today()).split('-')[2])
                month = int(str(datetime.date.today()).split('-')[1])
                date = (json.loads(r.text)['user']['meterReadings'][-1]['time'])
                if today > 19 and today < 26\
                        and int(json.loads(r.text)['user']['meterReadings'][-1]['time'].split('.')[1]) != month:
                    a = await bot.send_message(cmcd, f'–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:\n'
                                            f'\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: *{date}*\n'
                                            f'\n–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞: *{coldWaterSupply}*'
                                            f'\n–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: *{hotWaterSupply}*',
                                        parse_mode='Markdown', reply_markup=menu_meter())
                else:
                    a = await bot.send_message(cmcd, f'–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:\n'
                                               f'\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: *{date}*\n'
                                               f'\n–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞: *{coldWaterSupply}*'
                                               f'\n–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: *{hotWaterSupply}*'
                                               f'\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ,'
                                               f' –≤ –ø–µ—Ä–∏–æ–¥ —Å 20 –ø–æ 25 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞',
                                         parse_mode='Markdown')
                    globalVar[str(cmcd)]['to_delete'].append(a.message_id)
                    a = await bot.send_message(cmcd,
                                         '–ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö,'
                                         ' –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ä–∞–∑–¥–µ–ª–µ *"–ñ–∞–ª–æ–±—ã"*',
                                         parse_mode='Markdown', reply_markup=back2())
            else:
                a = await bot.send_message(cmcd, '–£ –≤–∞—Å –æ—Ç—Å—Ç—É—Ç—Å–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–æ–≤. –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å?',
                                     reply_markup=menu_meter())
            (globalVar[str(cmcd)]['message_id']) = str(a.message_id)
            globalVar[str(cmcd)]['meter'] = list()

        elif call.data == 'delete_notification':
            await bot.delete_message(cmcd, cmmi)

        elif call.data == 'delete_notification1':
            for id in globalVar[str(cmcd)]['help_message']:
                await bot.delete_message(cmcd, id)
            globalVar[str(cmcd)]['help_message'] = list()

        await bot.answer_callback_query(call.id)

    except Exception as e:
        print(e)
        pass


async def check_for_editing_messages():
    for i in globalVar:
        mes = globalVar[str(i)]['message_id_time_send']
        if mes != '':
            d1 = datetime.datetime.strptime(mes, "%Y-%m-%d %H:%M:%S")
            d2 = datetime.datetime.now()
            current_state = dp.current_state(chat=int(i))
            if (d2 - d1).seconds >= 1200 and await current_state.get_state() is not None:
                await current_state.finish()
                await current_state.reset_state()
                await deleting(int(i))
                if globalVar[str(i)]['topic'] is not None:
                    await bot.delete_message(int(i), int(globalVar[str(i)]['topic']))
                    globalVar[str(i)]['topic'] = None
                await bot.edit_message_text('–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /start',
                                            int(i), int(globalVar[str(i)]['message_id']))
                globalVar[str(i)]['message_id'] = None
                globalVar[str(i)]['message_id_time_send'] = ''
            if (d2 - d1).seconds >= 169200:
                await bot.edit_message_text('–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /start',
                                            int(i), int(globalVar[str(i)]['message_id']))
                globalVar[str(i)]['message_id'] = None
                globalVar[str(i)]['message_id_time_send'] = ''


def repeat(coro, loop):
    asyncio.ensure_future(coro(), loop=loop)
    loop.call_later(3600, repeat, coro, loop)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.call_later(3600, repeat, check_for_editing_messages, loop)
    executor.start_polling(dispatcher=dp, loop=loop)
