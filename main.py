import datetime
import time
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telegram_bot_calendar import LSTEP, WYearTelegramCalendar
from geopy.geocoders import Nominatim
import json
import requests
import os
from validate_email import validate_email
import atexit
import random
from PIL import Image

geolocator = Nominatim(user_agent="tg_bot")
url = 'https://tools.emailmatrix.ru/event-generator/'
myobj = {
    "apikey": "AAFfAT_ggb_QS8Shwp6G2aNbuid69pfSNQ4",
    "start": "2021-09-28 00:00",
    "end": "2021-09-28 01:00",
    "timezone": "Europe/Moscow",
    "title": "–°–æ–±—ã—Ç–∏–µ",
    "url": "http://emailmatrix.ru",
    "location": "–≥. –†—è–∑–∞–Ω—å, 390010, —É–ª. –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è, –¥. 65, H264",
    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
    "remind": "2",
    "remind_unit": "h"
}
url_keys = {"sport": "–°–ø–æ—Ä—Ç",
            "education": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            "roflxdlmao": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ",
            "public_govno": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–µ–∞—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "–°–ø–æ—Ä—Ç": "sport",
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "education",
            "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ": "roflxdlmao",
            "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–µ–∞—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "public_govno"}

x = (requests.post(url, json=myobj)).json()
#ics, google = x['ics'], x['google']
tconv = lambda x: time.strftime("%H:%M:%S %d.%m.%Y", time.localtime(x))
editing=0

token = '1917275192:AAFfAT_ggb_QS8Shwp6G2aNbuid69pfSNQ4'  # bot constants
bot = telebot.TeleBot(token)
users = {}  # constants for db
url = 'http://renat-hamatov.ru'
with open('users.txt', "r") as json_file:
    users = json.load(json_file)
    # print(users.keys())


def save_users(users):
    with open('users.txt', 'w') as outfile:
        json.dump(users, outfile)


def listener(messages):
    for m in messages:
        if m.content_type == 'text':
            print("‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì")
            print(f'{m.chat.first_name}[{m.chat.id}][{datetime.datetime.now().strftime("%d-%m-%Y_%H-%M")}]: {m.text}')
            with open('logs.txt', 'a', encoding='utf-8') as logs_file:
                logs_file.write("‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n")
                logs_file.write(
                    f'{m.chat.first_name}[{m.chat.id}][{datetime.datetime.now().strftime("%d-%m-%Y_%H-%M")}]: {m.text}\n')


bot.set_update_listener(listener)


def menu():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1 #–®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    log_in = InlineKeyboardButton("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", callback_data="log_in")
    registration = InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="registration")
    markup.add(log_in, registration)
    return markup

def menu2():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1 #–®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –∫–Ω–æ–ø–æ–∫
    fuck_u = InlineKeyboardButton("–ü–æ—Å–ª–∞—Ç—å –º–∏—à—É –Ω–∞—Ö—É–π", callback_data="fuck_u")
    exit = InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="exit")
    markup.add(fuck_u, exit)
    return markup


def logging_in(message):
    global editing
    logs=[]
    logs.append(message.text)
    if validate_email(logs[0]):
        a = bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', cmcd, cmmi) #editing = 0
        a = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:',reply_markup=back3()) #editing = 2
        editing += 2
        bot.register_next_step_handler(a,logging_in2,logs)

    else:
        a = bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', cmcd, cmmi) #editing = 0
        a = bot.send_message(message.chat.id, '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=back()) #editing = 2
        editing +=2

def logging_in2(message,logs):
    global editing
    logs.append(message.text)
    print(logs)
    print(tconv(message.date))

    s = requests.Session()
    payload = {"email": logs[0], "password": logs[1]}
    send_to = 'signin'
    r = s.post(f'{url}/{send_to}', json=payload)
    print(json.loads(r.text))
    try:
        if json.loads(r.text)['token']:
            a = bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', cmcd, cmmi+2)  # editing = 0
            bot.delete_message(message.chat.id, message.message_id)
            a = bot.send_message(message.chat.id, '–í—ã –≤–æ—à–ª–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!‚úÖ', reply_markup=menu2()) #editing = 4
            editing +=2
        else:
            a = bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', cmcd, cmmi + 2)
            bot.delete_message(message.chat.id, message.message_id)
            a = bot.send_message(message.chat.id,'–û—à–∏–±–∫–∞! –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',reply_markup=menu()) #editing = 4
            editing +=2
        """else:
            bot.delete_message(message.chat.id, message.message_id)
            a = bot.send_message(message.chat.id,'–û—à–∏–±–∫–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º—É\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=menu())"""
    except Exception:
        a = bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', cmcd, cmmi + 2)
        bot.delete_message(message.chat.id, message.message_id)
        a = bot.send_message(message.chat.id,'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',reply_markup=back()) #editing = 4
        editing +=2



def check2(id):
    k = os.listdir(path="users")
    for i in range (len(k)):
        with open(f'users/{k[i]}','r') as f:
            s=f.readlines()
        if len(s)==2:
            if int(s[1]) == int(id):
                return True
    return False

def exit(id):

    k = os.listdir(path="users")
    for i in range(len(k)):
        with open(f'users/{k[i]}', 'r') as f:
            s=f.readlines()
        if len(s)==2:
            if int(s[1])==int(id):
                with open (f'users/{k[i]}', 'w') as f:
                    f.write(s[0])
                break


    return False

def back3():
    markup = InlineKeyboardMarkup()
    back_to_menu = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu')
    markup.add(back_to_menu)
    return markup


def back():
    markup = InlineKeyboardMarkup()
    log_in = InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥', callback_data='log_in')
    back_to_menu = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu')
    markup.add(back_to_menu, log_in)
    return markup



@bot.message_handler(commands=['start'])
def send_welcome(message):
    global editing
    if check2(message.chat.id):
        bot.delete_message(message.chat.id, editing)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, *{message.from_user.first_name}*!üò¢\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu2(),parse_mode="Markdown")
    else:

        if message.message_id != 1 and editing!=0:
            bot.delete_message(message.chat.id, editing)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üòÇ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu())
    if str(message.chat.id) not in users:
        users[str(message.chat.id)] = [[], [], False]
        save_users(users)
    editing = message.message_id + 1


@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'contact'])
def error(message):
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        pass
    bot.send_message(message.chat.id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏. '
                                      '–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        global cmcd, cmmi,url,editing
        cmcd = call.message.chat.id
        cmmi = call.message.message_id
        print(call.message.chat.id, call.data)
        with open(f"users.txt") as json_file:
            users = json.load(json_file)

        if call.data == "log_in":
            count=0
            a = bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
                                  cmcd, cmmi,reply_markup=back3())
            bot.register_next_step_handler(a, logging_in)
        elif call.data.startswith("_"):
            print(1)
            users[str(call.message.chat.id)][0].append(call.data[1:])
            bot.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!!", cmcd, cmmi, reply_markup=menu())
            save_users(users)
        elif call.data == 'registration':
            a = bot.delete_message(cmcd, cmmi)
            a = bot.send_message(cmcd,f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç–µ:\n {url}')
            a = bot.send_message(cmcd, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µü§¨:',reply_markup=menu())
            editing = cmmi+2

        elif call.data == 'fuck_u':
            bot.edit_message_text('–ø–∞—à–µ–ª –Ω–∞—Ö—É–π', cmcd,cmmi,reply_markup=menu2())

        elif call.data == 'exit':
            exit(call.message.chat.id)
            bot.edit_message_text('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞‚ùó', cmcd,cmmi,reply_markup=menu())

        elif call.data == 'back_to_menu':
            bot.clear_step_handler_by_chat_id(cmcd)
            bot.edit_message_text( '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüòâ:',cmcd, cmmi, reply_markup=menu())


        bot.answer_callback_query(call.id)
    except Exception as e:
        print(e)
        pass


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f'–≥–¥–µ-—Ç–æ —Ö–µ—Ä–Ω—è   {e}')
            time.sleep(5)